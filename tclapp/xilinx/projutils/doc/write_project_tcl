Description:

  Create a Tcl script to recreate the current project. The generated script
  will contain the Tcl commands for creating the project, setting the project
  type, creating filesets, adding/importing source files, defining runs and
  run properties. 

  This Tcl project script and the various design sources can be stored in a
  version control system for source file management and project archival.

Arguments:

  -force - (Optional) Overwrite an existing project script file of the same
  name. If the script file already exists, the tool returns an error unless
  the -force argument is specified. 

  -all_properties - (Optional) Write all properties (default and non-default)
  for the project. The tool will write "set_property" commands for setting the
  properties for objects like project, filesets, files, runs etc. 

  Note: By default, if the -all_properties switch is not specified, then only
  the non-default properties will be written to the script.

  -no_copy_sources - (Optional) Do not import sources even if they are local to
  the original project. The tool will not import the files that were local in
  the original project into the new project. 

  -quiet - (Optional) Execute the command quietly, ignoring any command line
  errors and returning no messages. The command also returns TCL_OK regardless
  of any errors encountered during execution.

  -verbose - (Optional) Temporarily override any message limits and return all
  messages from this command.

  Note: Message limits can be defined with the set_msg_config command.

  <file> - (Required) The name of the output Tcl script file to be created by
   the write_project_tcl command. The tool will apply an extension of '.tcl' if
   a file extension is not supplied. 

Examples:

  The following example exports a Tcl script named "recreate.tcl" for the current
  project:-

  % write_project_tcl recreate.tcl

  The following Tcl commands exports Tcl script for the current project and writes
  all the properties, both default or non-default values:-

  % write_project_tcl -all_properties recreate.tcl

  The following Tcl commands exports Tcl script for the current project and adds
  files that are local in this project. The recreated project will reference these
  files:-

  % write_project_tcl -no_copy_sources recreate.tcl

  The following Tcl commands exports "recreate.tcl" script for the current project in
  the current working directory, creates a new project in ./my_test directory, prints
  the list of files in the new project, prints the current project settings and then
  closes the newly created project:-

  % open_project ./test/test.xpr
  % write_project_tcl -force recreate.tcl
  % close_project
  % file mkdir my_test
  % cd my_test
  % source ../recreate.tcl
  % get_files -of_objects [get_filesets sources_1]
  % report_property [current_project]
  % close_project

  The following Tcl commands creates a new project named bft_test, adds files to the
  project, sets the fileset property, exports a tcl script named "bft.tcl" in the current
  working directory, creates a new project in "./my_bft" directory, prints the list of
  files in the new project (test_1.v and test_2.v), prints the "verilog_define" property
  value and then closes the newly created project:-

  % create_project bft_test ./bft_test
  % add_files test_1.v
  % add_files test_2.v
  % set_property verilog_define {a=10} [get_filesets sources_1]
  % write_project_tcl -force bft.tcl
  % close_project
  % file mkdir my_bft
  % cd my_bft
  % source ../bft.tcl
  % get_files -of_objects [get_filesets sources_1]
  % get_property verilog_define [get_filesets sources_1]
  % close_project

See Also:

   *  add_files
   *  archive_project
   *  close_project
   *  create_project
   *  current_project
   *  get_files
   *  get_property
   *  open_project
   *  report_property
   *  set_property
