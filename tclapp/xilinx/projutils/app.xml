<?xml version="1.0" encoding="utf-8"?>
<catalog>
  <apps>
    <app>
      <revision_history>Enhance write_project_tcl command to generate tcls with version-less IPs.</revision_history>
      <name>projutils</name>
      <pkg_require>Vivado 2014.1</pkg_require>
      <company>xilinx</company>
      <company_display>Xilinx, Inc.</company_display>
      <summary>This is a collection of scripts and utility application that are grouped by relevance to manipulation of projects.</summary>
      <display>Project Utilities</display>
      <procs>
        <proc>
          <name>convert_ngc</name>
          <summary>Convert all provided NGC files to a supported format</summary>
        </proc>
        <proc>
          <name>copy_run</name>
          <summary>Copy a run from an already existing run, source-run, to a new copy of that run, destination-run.</summary>
        </proc>
        <proc>
          <name>create_rqs_run</name>
          <summary>Creates and launches a new run based on the suggestions by report_qor_suggestions. This proc looks for 5 files in the directory specified by the user. 1.RQSPreSynth_&lt;newProjName&gt;.xdc  2.RQSImplCommon_&lt;newProjName&gt;.xdc  3.RQSPreImpl_&lt;newProjName&gt;.xdc 4.RQSPreImpl_&lt;newProjName&gt;.tcl 5.RQSImplCommon_&lt;newProjName&gt;.tcl. There are 2 flows. One is creating both synth and impl runs and the other is creating only impl run making user specified synth run as the parent for the newly created impl run. In the first flow, we create a new synth run based on the current impl run&apos;s parent run (i,e current synth run). We create a new constraint fileset and add the current synth run&apos;s constraint fileset&apos;s files to that. And we add RQSPreSynth_&lt;&gt;.xdc file to newly created constraint set. We create a impl run based on the current impl run. We create a impl run constraint (if it is not same as the one that has already been created), and add the current impl run&apos;s constraint fileset&apos;s files to that. We also add RQSImplCommon_&lt;&gt;.xdc to new impl constraint fileset. We set STEPS.OPT_DESIGN.TCL.PRE property of newly created impl run to RQSImplCommon_&lt;&gt;.tcl file. In this flow, we ignore RQSPreImpl_&lt;&gt;.xdc/tcl files. In the second flow, user specified synth run is used as parent for the newly created impl run. So there is no synth run creation. We create impl run based on current impl run and user specified synth run. We create a new impl constraint fileset and add fileset to that form the current impl run&apos;s constraint fileset. We also add RQSImplCommon_&lt;&gt;.xdc , RQSPreImpl_&lt;&gt;.xdc files. If RQSPreImpl_&lt;&gt;.tcl file is available, it is set as STEPS.OPT_DESIGN.TCL.PRE property for new impl run otherwise RQSImplCommon_&lt;&gt;.tcl is set. In both the flows adding or setting files is subject to availability of those files in the output directory.</summary>
        </proc>
        <proc>
          <name>export_bd_synth</name>
          <summary>Create and write a single design checkpoint and stub files for a Block Design (BD), for use with third party synthesis tools. Perform synthesis as necessary.</summary>
        </proc>
        <proc>
          <name>export_ip_user_files</name>
          <summary>Generate and export IP/IPI user files from a project. This can be scoped to work on one or more IPs.</summary>
        </proc>
        <proc>
          <name>export_simulation</name>
          <summary>Export a script and associated data files (if any) for driving standalone simulation using the specified simulator.</summary>
        </proc>
        <proc>
          <name>setup_ip_static_library</name>
          <summary>Extract IP static files from the project or repository and prepare it for compile_simlib</summary>
        </proc>
        <proc>
          <name>write_project_tcl</name>
          <summary>Export Tcl script for re-creating the current project</summary>
        </proc>
      </procs>
    </app>
  </apps>
</catalog>
